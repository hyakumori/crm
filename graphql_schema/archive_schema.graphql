scalar JSON
scalar DateTime

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Archive {
  attributes: JSON
  basic_info: JSON
  client_id: ID!
  end_date: DateTime
  forest_id: ID!
  id: ID!
  start_date: DateTime
}

type ArchiveConnection {
  items: [Archive]
  nextToken: String
}

type Mutation {
  createArchive(input: CreateArchiveInput!): Archive
  deleteArchive(input: DeleteArchiveInput!): Archive
  updateArchive(input: UpdateArchiveInput!): Archive
}

type Query {
  getArchive(client_id: ID!, forest_id: ID!): Archive
  listArchives(filter: TableArchiveFilterInput, limit: Int, nextToken: String): ArchiveConnection
}

type Subscription {
  onCreateArchive(client_id: ID, end_date: DateTime, forest_id: ID, id: ID, start_date: DateTime): Archive @subscribe(mutations : ["createArchive"])
  onDeleteArchive(client_id: ID, end_date: DateTime, forest_id: ID, id: ID, start_date: DateTime): Archive @subscribe(mutations : ["deleteArchive"])
  onUpdateArchive(client_id: ID, end_date: DateTime, forest_id: ID, id: ID, start_date: DateTime): Archive @subscribe(mutations : ["updateArchive"])
}

input CreateArchiveInput {
  attributes: JSON
  basic_info: JSON
  client_id: ID!
  end_date: DateTime
  forest_id: ID!
  start_date: DateTime
}

input DeleteArchiveInput {
  id: ID!
}

input TableArchiveFilterInput {
  client_id: ID
  end_date: DateTime
  forest_id: ID
  id: ID
  start_date: DateTime
}

input UpdateArchiveInput {
  attributes: JSON
  basic_info: JSON
  client_id: ID
  end_date: DateTime
  forest_id: ID
  id: ID!
  start_date: DateTime
}
